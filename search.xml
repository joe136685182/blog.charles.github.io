<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[如果能，你夠強！ - 黃執中的日志]]></title>
    <url>%2Fcategory%2F20190527-jonas-hwang-blog-01.html</url>
    <content type="text"><![CDATA[引言 自从网易博客停止服务后，想找少爷的文章就变得非常困难，比如收藏夹里这篇 如果能，你夠強！ 就无迹可寻。今天终于找到了少爷博客的存档（不过需要科学上网），于是赶紧备份下来，以备查阅。后续应该还会陆陆续续搬运过来，具体目录请见 这里 。 正文 智慧型手機出現後，我們或多或少，都曾遇到過像這樣的「社交羞辱」：那些說好陪你吃飯，一起開會，共同敘舊，約會喝茶的傢伙……人坐對面，心在別的地方。 低頭，傳訊，按讚，打卡。 他們用那麼簡單地動作，當面向你傳達：此時，此刻，**即使隨意和那些他「真正」在意的人隔空打屁幾句，哼哼哈哈，都好過陪你這頓飯，這個會，這談話，這杯茶。** 在我心中，你其實沒那麼重要。 這種羞辱，老一輩的人不能忍！ 喔，我當然不會天真地認為，手機出現前，人人都能喜愛他眼前的聚會。 只不過，那時他們沒選擇。 科技，讓人自由。 但「自由」的本質，卻恰卻是一種「羞辱」。 是的，就像人，都是在有了選擇職業的自由後，才有機會，去「羞辱」他們家傳的祖業。 所以世家子弟，終於可以做畫家，不用拚命應科舉。 以至老店後人，也能跑去當船員，不用認命熬羹湯。 更老一輩的人，面對這種「自由」，也同樣會覺得傷心，覺得被羞辱。 我自豪的身分，原來，對你其實不重要？ 我自傲的技藝，原來，對你其實不重要？ 言論自由、宗教自由、婚戀自由、思想自由、居住與遷徙的自由……每一種自由的機會，選擇的結果，換個角度看，其本質都是否定與羞辱。 是的，自由的意義，就在於你必須承認：原來你所在意的，對人家來說不重要；原來你所信仰的，對人家來說不重要；原來你所珍惜所熱愛，甚至願意為之犧牲青春、奉獻性命的。 對人家來說，根本一點都不重要。 不能忍受羞辱，便難擁抱自由。 要想避免羞辱，就得限制自由。 故「自由」的反義詞，不是「奴役」，而是「尊重」。 尊重傳統、尊重師長、尊重上帝、尊重律法、尊重族群、尊重國家、尊重他人的感受與感傷……每一種尊重的方式，體諒的代價，換個角度看，其本質都是妥協與退讓。 你願意痛快地羞辱人，然後，也痛快地被人羞辱嗎？ 如果能，你夠強！ 也它馬的夠流氓！ 可人生在世，真自由——惟強者，與流氓得享。]]></content>
      <categories>
        <category>jonas-hwang</category>
        <category>辯士的思索</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>黄执中</tag>
        <tag>辯士的思索</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo文章发布环境的自动部署02-Hexo配置]]></title>
    <url>%2Fcategory%2F20190525-hexo-autodeploy-two.html</url>
    <content type="text"><![CDATA[引言 本文承接自 这篇文章 ，在配置完 Git 及完成其自动配置脚本后，接下来就准备对 Hexo 本身动手啦！ 正文配置 Hexo 发布环境创建新 Repository 打开浏览器并登陆到 GitHub 网站，在个人首页上切换到”Repositories”标签页并点击右侧的”New”按钮进入新建 Repository 界面： 其中”Repository name”可自行填写，因为 Hexo 发布环境中可能会涉及密码或 client_secret 等不宜公开的内容，所以发布模式选择”Private”更为安全。填写完毕后，点击下方的”Create repository”完成创建。 修改并上传 Hexo 文件拷贝 Hexo 文件 在终端中运行 git clone https://github.com/joe136685182/HexoBlog.git 将新建的 repository 克隆到本地（请将命令中的 GitHub 链接替换为你个人的 repo 地址），然后将本地的 Hexo 文件复制到生成的文件夹中，如下图： 配置 .gitignore 文件 因为我们只需要最基本的 Hexo 文章发布环境，所以可以随时自动安装的 Hexo 程序、相关的Node.js 模块以及自动生成的 public 文件夹都是不需要上传的。按照这个原则，我们可以通过配置 .gitignore 文件来屏蔽这些内容。 在终端中进入刚刚克隆出来的 HexoBlog 文件夹，然后执行以下命令： 123$ cd HexoBlog$ touch .gitignore$ vi .gitignore 在打开的编辑界面中输入以下内容，并保存退出： 123456789node_modules/public/.DS_StoreThumbs.db*.log.deploy_gityarn.lock*.swap*.iml 上述配置分别屏蔽了 Node.js 模块安装目录、自动生成的文章目录、 macOS 自动生成的 .DS_Store 文件、图片缩略图 Thumbs.db 文件、日志文件、Hexo 发布文章到 GitHub 前自动生成的缓存目录以及 Hexo 生成文章时自动产生的各个临时文件。 除这些文件/文件夹以外，如果有其它屏蔽/添加文件的需要，可以自行访问 这里(英语) 或 这里(中文) 学习 .gitignore 的配置语法。 配置主题文件（可选） 如果你的 Hexo 通过 git clone 的方式配置了第三方主题（比如本站就使用了 NexT主题 ）的话，在 themes/ 目录下会有相应的文件夹，如果此时直接通过 git add 命令添加主题文件夹，会有如下错误提示： 123456789101112131415$ git add themeswarning: adding embedded git repository: themes/nexthint: You've added another git repository inside your current repository.hint: Clones of the outer repository will not contain the contents ofhint: the embedded repository and will not know how to obtain it.hint: If you meant to add a submodule, use:hint: hint: git submodule add &lt;url&gt; themes/nexthint: hint: If you added this path by mistake, you can remove it from thehint: index with:hint: hint: git rm --cached themes/nexthint: hint: See "git help submodule" for more information. 这是因为 Git 检测到了，要添加的 themes/next 目录是来自另一个 Git 项目，不能直接作为本项目的文件进行上传。遇到这种情况有两种解决方法： 将主题配置为子模块 这也是上文错误提示中建议的一种处理方式。这样做的好处是操作简单，且能保证每次克隆本项目时，作为子模块的主题能跟随作者的更新保持同步；但这会导致每次克隆之后，我们对主题配置文件 _config.yml 及其它文件的修改都会丢失，需要重新配置。 如果选择这种解决方法，只需在 HexoBlog/ 目录下执行 git submodule add git-url themes/next 即可，其中 git-url 需要替换为主题的 GitHub 地址。要使用带了子模块的项目有一些 注意事项 需要注意，请务必了解。 清除主题中的 Git 相关信息 这种处理方式可以保留对主题配置文件及其它文件的修改，但如果主题作者对主题进行了更新，则在同步更新主题时会比较麻烦。因为本站使用了 Gitment 以实现文章评论，对主题配置文件进行了修改，而这种处理方式可以保留修改，且在克隆时更简单快捷，所以选择使用这种处理方法。 如果选择这种解决方法，可以通过以下命令清除主题的 Git 信息： 12$ cd themes/next$ rm -rf .git* 这样就完成了 Git 信息的清除，此时再通过 git add 命令添加 themes/ 目录就不会再有错误提示了。而当主题作者进行了更新要进行同步的话，就只能删除当前的主题目录，重新克隆最新的主题，然后重新进行配置，这也是这种解决方法的不足之处。 将处理后的 Hexo 目录同步到 GitHub 到这里，对 Hexo 目录的处理就基本完成了，在终端中进入 HexoBlog 目录，执行 git status 命令，可以查看到待同步文件信息。接下来执行 git add * 将所有变更添加到待同步列表中，此时 Git 会根据 上文 配置的 .gitignore 文件，过滤掉相应的文件和文件夹。 此时再次执行 git status 命令，可以看到除了 .gitignore 文件以外，所有变更都已经进入待提交队列了，所以还需要执行 git add .gitignore 命令将 .gitignore 文件也添加进去。一切准备就绪后，执行 git commit -am &quot;first commit of hexo&quot; 进行提交，并执行 git push 推送到 GitHub 上。 编写 Hexo 自动初始化脚本将 Hexo 克隆到本地并初始化 上文已经将 Hexo 目录同步到 GitHub 了，接下来说一下如何将 Hexo 目录部署到本地并进行初始化。 首先在终端中进入要部署 Hexo 环境的目录下，执行 git clone git-url 将之前处理过并上传的 Hexo 目录拉取到本地（假设没有添加第三方主题，或主题已经 照此 处理），其中 git-url 需要替换为本项目的 GitHub 地址（如 https://github.com/joe136685182/HexoBlog.git ），然后执行以下命令完成初始化： 1234$ cd HexoBlog$ npm install --save hexo$ npm install$ npm install --save hexo-deployer-git 如果在上传 Hexo 目录时，使用了 这种方法 处理第三方主题，则需要额外处理子模块的同步问题，具体操作方式请参考 这篇文章 。 在完成初始化之后，就可以直接通过 Hexo new title 命令进行新建文章操作、通过 Hexo clean &amp;&amp; Hexo g -d 命令发布文章了。请注意，在每次新建、修改、发布文章后，或者调整了 Hexo 及主题的设置后，都建议执行以下命令，将变更及时同步到 GitHub 上，避免变更丢失： 1234$ Hexo clean$ git add *$ git commit -am "add/modifiy articles or change config files"$ git push 将初始化命令编写为脚本 每次更换环境都要手动完成初始化，其实可以将初始化命令编写成自动化脚本。进入 HexoBlog 目录，执行以下命令： 123$ touch init_hexo.sh$ chmod +x init_hexo.sh$ vi init_hexo.sh 在打开的编辑界面中输入以下内容，并保存退出： 1234#!/bin/bashnpm install --save hexonpm installnpm install --save hexo-deployer-git 然后接着执行以下命令，将该脚本同步到 GitHub 上： 123$ git add init_hexo.sh$ git commit -am "add auto-deploy script"$ git push 到这里，脚本的编写和同步就完成了。 新环境下快速部署 Hexo 目录 假设现在换了一台新电脑（系统为 macOS 或某个 Linux 发行版），结合 这篇文章 中的内容，只要安装好Node.js 环境以及 Git 工具，即可实现 Hexo 目录的快速部署。 首先检查 Node.js 环境及 Git 工具已经安装完毕，然后将 之前 准备好的 SSH Key 部署文件夹拷贝到新电脑上（假设为 ~/GithubKey 目录），在终端中执行以下命令完成 Git 工具的配置： 12$ cd ~/GithubKey$ ./init_github.sh 部署完 SSH Key 之后，在终端中执行以下命令，完成 Hexo 环境的部署和初始化： 1234$ cd ~$ git clone https://github.com/joe136685182/HexoBlog.git$ cd HexoBlog$ ./init_hexo.sh 其中执行 git clone 命令时要记得将 GitHub 地址替换为自己的项目地址。到这里就完成了 Hexo 文章发布环境的部署和初始化，一共只需要执行6个命令，而且还能实现文章的备份，一举两得。如果你比我还懒的话，后4个命令还可以集成到 GithubKey/init_github.sh 中，真正实现一键部署，这个就留给有缘人你自己去折腾吧～ 后记 到这里终于记录完了这个小任务的全过程，真的我保证，上手试一下就能发现这真的是个小任务，不知道为什么写下来会这么长😂 搞 Hexo 还是蛮有意思的，就是部署不太容易，文章也容易丢。考虑到以后经常要用 rMBP 以外的电脑，换电脑是个麻烦事，所以还是查了一些资料，把这个脚本搞了出来。这两天的小折腾也让我学习了蛮多 Git 相关的知识，果然懒和好奇是第一驱动力丫。好了我要去洗菜了，白白～]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Hexo</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo文章发布环境的自动部署01-Git配置]]></title>
    <url>%2Fcategory%2F20190524-hexo-autodeploy-one.html</url>
    <content type="text"><![CDATA[引言 Hexo 博客搭建完了之后，文章发布虽然方便，但发布流程依赖于本机上已经部署好的 Hexo 环境，当要发布文章时，如果部署好的电脑不可用（坏了/不在身边），或者换了新电脑，总之面对一台空荡荡的新电脑，要重新人工搭建已有环境非常麻烦，且之前发布过的文章（md文件）会丢失。 为了避免这种情况，我们可以通过 Github 将文章及发布环境打包，做成一键备份/部署的脚本，这样在迁移到新环境后，只需简单的操作即可完成 Hexo 文章发布环境的部署，同时实现文章的备份及同步功能。 正文环境准备 本文以 macOS 10.14.4系统为例，具体命令及路径请根据自己的情况进行调整。 在开始之前，请确定已安装 Node.js 环境并配置好系统环境变量，然后在终端运行 node -v 查看 Node.js 版本，运行 npm -v 查看 NPM 版本，没有出现报错说明 Node.js 环境正常。如果没有安装 Node.js 环境的话，可以参考 本文 进行安装 安装并配置 Git安装 Git macOS 已经自带了 Git，如果没有安装，或者是其它系统/平台，可以参考 官网教程 ，或自行谷歌查找教程。对于 macOS 及 Windows 系统，还可以通过 这里 下载带 GUI 界面的安装包。 安装完成后，在终端运行 git --version 查看 Git 的版本，没有出现报错说明Git已经正确安装。 配置 Git 连接 GitHub设置 GitHub 用户名和邮箱 首先，假定已经有了一个 GitHub 账号。接下来，通过终端配置名字和邮箱： 12$ git config --global user.name "John Doe"$ git config --global user.email yourmail@gmail.com 其中”John Doe”替换为你的 GitHub 用户名，也就是个人首页链接 https://github.com/username 中的username；yourmail@gmail.com 替换为该 GitHub 账号设置的 Public email 地址。 配置完成后，可以通过 git config —list 命令检查配置是否正确。注意，如果 GitHub 账号没有设置 Public email 或者设置的 Public email 与配置不符，均会导致后续 Git 同步出错。 配置 SSH Key 本地 Git 仓库与 GitHub 仓库之间进行数据传输时，是通过 SSH 进行加密通信的，而 SSH Key 就是加密通信时用于验证身份的密钥。 生成 SSH Key 打开终端，执行 ssh-keygen -t rsa -C &quot;yourmail@gmail.com&quot; 生成 SSH Key 密钥对。其中 -t 参数指定了密钥对的加密协议为 RSA ，在本次密钥对生成中不能更换为其它协议；-C 参数设置的是生成密钥对的备注，可以自行填写为其它内容。 输入上述命令后回车执行，会提示询问生成密钥对的存放路径（默认为 ~/.ssh/id_rsa ），一般情况下保持默认，直接回车确认即可；确认存放路径后，程序会提示”设置密钥对密码”，此处直接回车跳过（即不设置密码），然后在接下来的”确认密码”环节也直接回车跳过，即可完成 SSH Key 的生成步骤。 注意，如果选定的密钥对存放路径中已经有同名文件，会提示是否覆盖，请根据实际情况选择覆盖或重新设定存放路径。生成 SSH Key 的过程可参考下文： 1234567891011121314151617181920212223$ ssh-keygen -t rsa -C "yourmail@gmail.com"Generating public/private rsa key pair.Enter file in which to save the key (/Users/charles/.ssh/id_rsa): /Users/charles/.ssh/id_rsa already exists.Overwrite (y/n)? yEnter passphrase (empty for no passphrase):Enter same passphrase again: Your identification has been saved in /Users/charles/Desktop/id_rsa.Your public key has been saved in /Users/charles/Desktop/id_rsa.pub.The key fingerprint is:SHA256:uBAtSvDY8ucTcMZAUjghqQJnZx/xcOAl7X4hv/qNN+I charles@bogonThe key's randomart image is:+---[RSA 2048]----+|=*+ =+o ||**oooo.*. ||=+=o*.oo. ||o+ = o..o . ||. o + ..So . || o o .. o || o . . . || . ooo || .+Eo.. |+----[SHA256]-----+ 配置 GitHub 在完成了 SSH Key的生成步骤后，可以在指定的存放路径下找到两个文件，即为生成的 SSH 私钥与公钥，文件名在生成密钥对时设置，默认情况下分别为 id_rsa 和 id_rsa.pub 。 打开浏览器，访问 GitHub 并登陆自己的账号，点击右上角个人头像并选择下拉菜单中的”Settings”： 在左侧找到”SSH and GPG keys”选项，然后点击”SSH keys”行右侧的”New SSH key”按钮，进入新增 SSH Key 界面： “Title”栏为该 SSH Key 的标题，可自行随意填写；然后在”Key”栏中填入之前生成的 id_rsa.pub 文件中的内容，具体内容查看方法如下： 12$ cat ~/.ssh/id_rsa.pubssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0wnQ2DVRZQ8LZ4Q2PbGDaEriUm4B+k9Xn/0kM1Z81xW4tF73hG7s7I9/GRRDD/ZWoWJesTEZpUaRNzb3fecofcQOVEgV0EYKeReHcI2CEhJcTGpT3Sosm0R5XZQytH/KUhE3gHPaBhSq5HvpjsjdvzcLwjwXzEut59bVnNXum0JfT2IiY1e7RxSgN28P0rgwGRVfiLjl0Lpa5lm/2L24MzQehIMb4bkgl+odbjCUJHr8RN/Xwj+O7cQyNBkNEYVhR58daG8vPVAaAI1ZvbUrh7i6YE9HjftRmsRtUzfMqna/OtMR2QC0Efao4A/rE4s/pCOJkwBDOmq38SkM6wmuF yourmail@gmail.com 将完整的文件内容（包括开头的”ssh-rsa”和末尾的邮箱/备注）复制并粘贴到 GitHub 网页的”Key”栏中： 点击”Add SSH key”保存即可。保存完成后，如果在生成 SSH 密钥对时没有使用默认的存放路径，则需要配置 SSH 连接的 Key 文件路径，下次有空再写应该怎么处理多 Key 文件的问题。此处默认 SSH Key 文件路径为 ~/.ssh/id_rsa 及 ~/.ssh/id_rsa 。 在终端中执行 ssh -T git@github.com 测试连通性，如果是第一次通过 SSH 连接 GitHub 的话，会提示”目标服务器未确认，是否保存 RSA key 信息并继续”，此处输入”yes”并回车即可。当出现下文提示时，说明 SSH Key 已经配置成功： 123456$ ssh -T git@github.comThe authenticity of host 'github.com (13.229.188.59)' can't be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'github.com,13.229.188.59' (RSA) to the list of known hosts.Hi joe136685182! You've successfully authenticated, but GitHub does not provide shell access. 编写 SSH Key 自动部署脚本 当换到一台新的电脑上时，我们肯定不想再重复一遍生成、配置、测试 SSH Key 的过程，所以可以把已经生成的密钥对文件复制出来，并通过 Shell 脚本自动复制到目标目录。在终端中执行以下命令： 12345$ mkdir GithubKey$ cd GithubKey$ touch init_github.sh$ chmod +x ./init_github.sh$ vi init_github.sh 在打开的编辑界面中输入以下内容，并保存退出： 1234#!/bin/bashcp ./.gitconfig ~/cp -p ./id_rsa* ~/.ssh/ssh -T git@github.com 第一行设置了 Shell 解释器的路径，可以根据具体情况进行调整；第二行将 Git 配置文件复制到 ~ 目录下，即 此处 配置的 GitHub 用户名和邮箱；第三行将之前生成的 SSH Key 文件拷贝到 ~/.ssh/ 目录下；第四行通过 ssh 命令测试与 GitHub 的连通性。 执行上述命令会生成 GithubKey 文件夹，然后将 ~/ 目录下的 .gitconfig 文件及 ~/.ssh/id_rsa 文件（即上文生成并在 GitHub 网站上配置好的 SSH Key 文件）拷贝到 GithubKey/ 目录中。 只要将该目录（也可打包为 zip 文件便于传输）拷贝至新环境下，安装完 Git 工具后，进入目录中执行该脚本文件，即可自动完成 Git 的配置。 后记 本来想一篇文章就把这个内容全部记完，但没想到单单一个 Git 与 GitHub 的配置就那么多内容，所以还是拆分成两篇吧，第二篇 在这里，先吃饭去了～]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Hexo</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Electron笔记02-Hello World！]]></title>
    <url>%2Fcategory%2F20190523-electron-note-two.html</url>
    <content type="text"><![CDATA[引言 在 前一篇文章 中介绍了在macOS上搭建Node.js+Electron的过程。准备好了开发环境，接下来当然是开始搞事情啦！作为一只程序猿，搞事情从哈喽沃德开始！ 第一个Electron AppElectron App的结构 这第一个App的名称暂定为 “test-app” ，它的基础文件结构如下： 1234test-app/├── package.json├── main.js└── index.html 这个结构是Electron App最简单最基础的文件结构，在这些文件里，我们可以定义、编写自己的应用的样式、功能等等。后期随着应用功能的增加，可能会遇到更复杂的组织形式。 各个文件的内容package.json package.json文件是一个Electron App的基础配置文件，基本内容如下： 12345&#123; "name" : "test-app", "version" : "0.1.0", "main" : "main.js"&#125; 其中”name”属性记录了应用的名称，可以自定义；”version”属性记录了应用的版本，可用于应用更新、版本控制等；”main”属性则指定了主进程的入口文件，在下文中会介绍。 作为一个标准的json文件，在这个文件中不能有任何注释符号，如//、/*、#等。同时还需要遵守其它json格式规范，具体细节就不赘述了。 main.js main.js文件（文件名可在package.json中自行定义）是Electron主进程的入口文件，基本内容如下： 123456789101112131415161718192021222324252627282930313233const electron = require('electron'); // 引用 Electron 模块。const app = electron.app; // 控制应用生命周期的模块。const BrowserWindow = electron.BrowserWindow; // 创建原生浏览器窗口的模块// 保持一个对于 window 对象的全局引用，不然当 JavaScript 被 GC 后，window 会被自动地关闭var mainWindow = null;// 当所有窗口被关闭了，退出。app.on('window-all-closed', function () &#123; // 在 OS X 上，通常用户在明确地按下 Cmd + Q 之前，应用会保持活动状态 // if (process.platform != 'darwin') &#123; app.quit(); // &#125;&#125;);// 当 Electron 完成了初始化并且准备创建浏览器窗口时，这个方法就会被调用app.on('ready', function () &#123; // 创建浏览器窗口。 mainWindow = new BrowserWindow(&#123; width: 800, height: 600 &#125;); // 加载应用的 index.html mainWindow.loadURL('file://' + __dirname + '/index.html'); // 默认打开开发工具 // mainWindow.openDevTools(); // 当 window 被关闭，这个事件会被发出 mainWindow.on('closed', function () &#123; // 取消引用 window 对象。如果你的应用支持多窗口的话，通常会把多个 window 对象 // 存放在一个数组里面，但这次是单窗口应用，只有一个 window 对象，退出时要销毁 mainWindow = null; &#125;);&#125;); 当App启动时，Electron主进程会根据package.json中配置的main入口文件，找到并执行。在main.js文件中，Electron完成了主窗口的初始化及创建后，会通过loadURL()函数加载主界面，而这个主界面就由接下来介绍的index.html文件定义。 index.html Electron在根据main.js完成了主窗口的初始化及创建后，会通过loadURL()函数加载index.html作为应用的主界面，基本内容如下： 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;Hello World!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello World!&lt;/h1&gt; Hello World! Hello Charles! This is your first Electron application, nice try! &lt;/body&gt;&lt;/html&gt; 运行程序 在按照上文完成三个文件的创建流程之后，一个最简单的Electron App就编写完成了。接下来就运行一下这个程序看看效果吧！ 打开终端，切换到应用项目所在文件夹（也就是上述三个文件所在的文件夹），然后输入以下命令： $ electron . Electron就会按照配置文件，初始化并创建主窗口，然后加载index.html文件，效果如下图： 顺手记录一下，macOS下的截图快捷键是 shift+command+4。 后记 到这里，第一个Electron App就跑起来了。所以其实我们可以看到，Electron应用本质上就是通过将浏览器窗口封装为一个应用，然后渲染网页作为界面，并通过JavaScript作为应用逻辑代码的实现语言。所以说，Electron真的是前端友好型语言啊！]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Electron</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Electron笔记01-开发环境的准备]]></title>
    <url>%2Fcategory%2F20190523-electron-note-one.html</url>
    <content type="text"><![CDATA[引言 计划用Electron把账本导出脚本GUI化，之前是通过Python3 + Excel文件实现的。虽然基本能满足自己的基本需求，但还是太简陋功能太少了。 在选择GUI方案时，考虑了WPF+C#、Xcode+Swift、Electron等几个方案，但出于以下几点考虑，最后选择了Electron： 第一点是因为目前主力用的rMBP，搞WPF实在是自找麻烦； 第二点是希望这个小玩意儿能跑在mac之外的平台上，毕竟除了手头这台rMBP剩下的都是Win平台，所以Swift不太行（主要是我的Swift水平不行XD）； 再有一点就是想学习一下Node.js，开阔一下眼界，毕竟现在掌握JS的人就能主宰世界[手动斜眼]。 所以就决定是你了，Electron！ 正文系统环境 机器：MacBook Pro (Retina, 13-inch, Late 2013) 系统：macOS Mojave 10.14.4 编辑器：Visual Studio Code 1.32.3 Shell：macOS自带Terminal 搭建开发环境安装Node.js 对于Node.js，有以下几种安装方法可选（建议使用安装包安装）： 1. 安装包安装，到 官网 下载PKG安装包后双击运行，安装提示一步一步执行即可。截至目前最新的版本为 node-v12.3.1 2. 源码手工编译，到 官网 根据自己的平台下载源代码压缩包，解压后手动编译并安装即可。 3. 通过Homebrew安装：在终端中执行brew install node即可。 安装完成后，在终端中分别执行npm -v和node -v查看安装的版本，如果没有报错说明Node.js安装完成。 安装Electron 1. 通过npm安装Electron。建议将Electron安装为全局模式，以便在终端中进行调用。具体安装命令为：npm install electron -g --save 2. 修改Bash配置，将Electron加入系统环境路径： 12$ cd ~$ vi .bash_profile 在.bash_profile文件中添加以下语句： 12#Setting PATH for Electron/Node.jsPATH="/Users/charles/nodejs/npm_global/bin:$&#123;PATH&#125;”export PATH 保存退出后，执行source .bash_profile使配置生效 安装及配置完成后，执行electron -v查看安装的版本，如果没有报错说明Electron安装完成。 后记 到这里，Electron就安装完成了，接下来就是喜闻乐见的Hello World环节啦！吃饭去，白白～]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Electron</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇文章]]></title>
    <url>%2Fcategory%2F20190522-first-article.html</url>
    <content type="text"><![CDATA[Hexo终于搭建完成了，Gitment也配置上了，测试一下文章效果如何。Hexo支持Markdown，看来以后还得学习一下Markdown语法。折腾这些玩意儿虽然没什么实际价值，但还是挺有趣的。 测试一下图片功能这是塞尔维亚贝尔格莱德老城区里，Casanova餐厅的招牌牛排。听说现在已经变成网红店了？ 这张合照也是在贝尔格莱德老城区拍的，在萨瓦河与多瑙河合流处的卡拉梅格丹城堡边上。至今我仍然非常想再去一次。 测试一下PicGo的上传效果 下面的内容没啥意思了 在MarkDown中，如果使用了尖括号对&lt;和&gt;，会被文本默认为HTML语句。这将导致尖括号本身及尖括号中的内容都不会被显示。 解决方法：使用转义字符。使用 &amp; lt; 代替 &lt; , 使用 &amp; gt; 代替 &gt; 。例如要输出&lt;a&gt;，则需要写为&amp; lt;a&amp; gt;]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>测试</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fcategory%2F20190521-auto-hello-world.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
